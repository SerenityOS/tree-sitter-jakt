================================================================================
Enums enum recursive method
================================================================================

struct CheckedVariable {
    is_mutable: bool
}

boxed enum Foo {
    Var(var: CheckedVariable)
    IndexedStruct(expr: Foo)

    function is_mutable(this) -> bool => match this {
        Var(var) => var.is_mutable
        IndexedStruct(expr) => expr.is_mutable()
    }
}

function main() {
    let foo = Foo::IndexedStruct(expr: Foo::Var(var: CheckedVariable(is_mutable: true)))

    println("{}", foo.is_mutable())
}

--------------------------------------------------------------------------------

(source_file
  (struct_declaration
    (type_identifier)
    (field_declaration_list
      (field_declaration
        (field_identifier)
        (primitive_type))))
  (enum_declaration
    (boxed_specifier)
    (type_identifier)
    (enum_variant_list
      (enum_struct_variant
        (identifier)
        (field_declaration
          (field_identifier)
          (type_identifier)))
      (enum_struct_variant
        (identifier)
        (field_declaration
          (field_identifier)
          (type_identifier)))
      (enum_method_variant
        (identifier)
        (parameters
          (this_parameter
            (this_reference)))
        (primitive_type)
        (return_expression
          (match_expression
            (this_reference)
            (match_block
              (match_arm
                (match_pattern
                  (call_expression
                    (identifier)
                    (arguments
                      (argument
                        (identifier)))))
                (field_expression
                  (identifier)
                  (field_identifier)))
              (match_arm
                (match_pattern
                  (call_expression
                    (identifier)
                    (arguments
                      (argument
                        (identifier)))))
                (call_expression
                  (field_expression
                    (identifier)
                    (field_identifier))
                  (arguments)))))))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (let_declaration
        (identifier)
        (static_call_expression
          (scoped_identifier)
          (field_identifier)
          (arguments
            (argument
              (identifier)
              (static_call_expression
                (scoped_identifier)
                (field_identifier)
                (arguments
                  (argument
                    (identifier)
                    (call_expression
                      (identifier)
                      (arguments
                        (argument
                          (identifier)
                          (boolean_literal)))))))))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (call_expression
              (field_expression
                (identifier)
                (field_identifier))
              (arguments))))))))
