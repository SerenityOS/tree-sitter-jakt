================================================================================
Functions Argument Labels ID=QQ2GCNP
================================================================================

/// Expect:
/// - output: ""

fn foo(a: bool, b: bool) {
}

fn bar(anon a: bool, b: bool) {
}

fn baz(anon a: bool, anon b: bool) {
}

fn qux(a: bool) {

}

fn main() {
    foo(a: true, b: true)
    bar(true, b: true)
    baz(true, true)

    let a = true
    qux(a)
}

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (identifier)
        (primitive_type))
      (parameter
        (identifier)
        (primitive_type)))
    (block))
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (anonymous_specifier)
        (identifier)
        (primitive_type))
      (parameter
        (identifier)
        (primitive_type)))
    (block))
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (anonymous_specifier)
        (identifier)
        (primitive_type))
      (parameter
        (anonymous_specifier)
        (identifier)
        (primitive_type)))
    (block))
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (identifier)
        (primitive_type)))
    (block))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (call_expression
        (identifier)
        (arguments
          (argument
            (identifier)
            (boolean_literal))
          (argument
            (identifier)
            (boolean_literal))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (boolean_literal))
          (argument
            (identifier)
            (boolean_literal))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (boolean_literal))
          (argument
            (boolean_literal))))
      (let_declaration
        (identifier)
        (boolean_literal))
      (call_expression
        (identifier)
        (arguments
          (argument
            (identifier)))))))
