================================================================================
Structs Method Mutable ID=10PII2G
================================================================================

/// Expect:
/// - output: "128\n"

struct Rectangle {
    width: i64,
    height: i64,

    fn grow(mut this) {
        this.width *= 2;
        this.height *= 2;
    }

    fn area(this) -> i64 => this.width * this.height
}

fn main() {
    mut rect = Rectangle(width: 4, height: 8)

    rect.grow()

    println("{}", rect.area())
}

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (struct_declaration
    (type_identifier)
    (field_declaration_list
      (field_declaration
        (field_identifier)
        (primitive_type))
      (field_declaration
        (field_identifier)
        (primitive_type))
      (function_declaration
        (identifier)
        (parameters
          (this_parameter
            (mutable_specifier)
            (this_reference)))
        (block
          (assignment_expression
            (field_expression
              (this_reference)
              (field_identifier))
            (integer_literal))
          (assignment_expression
            (field_expression
              (this_reference)
              (field_identifier))
            (integer_literal))))
      (function_declaration
        (identifier)
        (parameters
          (this_parameter
            (this_reference)))
        (primitive_type)
        (return_expression
          (binary_expression
            (field_expression
              (this_reference)
              (field_identifier))
            (field_expression
              (this_reference)
              (field_identifier)))))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (argument
              (identifier)
              (integer_literal))
            (argument
              (identifier)
              (integer_literal)))))
      (call_expression
        (field_expression
          (identifier)
          (field_identifier))
        (arguments))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (call_expression
              (field_expression
                (identifier)
                (field_identifier))
              (arguments))))))))
