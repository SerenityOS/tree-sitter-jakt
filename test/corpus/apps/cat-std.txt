================================================================================
Apps cat lib open
================================================================================

function main(args: [String]) {
    if args.size() <= 1 {
        eprintln("usage: cat <path>")
        return 1
    }

    mut file = File::open_for_reading(args[1])
    mut array: [u8] = [0u8]

    while file.read(array) != 0 {
        for idx in 0..array.size() {
            print("{:c}", array[idx])
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (identifier)
        (array_type
          (primitive_type))))
    (block
      (if_statement
        (binary_expression
          (call_expression
            (field_expression
              (identifier)
              (field_identifier))
            (arguments))
          (integer_literal))
        (block
          (call_expression
            (identifier)
            (arguments
              (argument
                (string_literal))))
          (return_statement
            (integer_literal))))
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (static_call_expression
          (scoped_identifier)
          (field_identifier)
          (arguments
            (argument
              (array_expression
                (identifier)
                (integer_literal))))))
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (array_type
          (primitive_type))
        (array_literal
          (integer_literal)))
      (while_statement
        (binary_expression
          (call_expression
            (field_expression
              (identifier)
              (field_identifier))
            (arguments
              (argument
                (identifier))))
          (integer_literal))
        (block
          (for_expression
            (identifier)
            (range_expression
              (integer_literal)
              (call_expression
                (field_expression
                  (identifier)
                  (field_identifier))
                (arguments)))
            (block
              (call_expression
                (identifier)
                (arguments
                  (argument
                    (string_literal))
                  (argument
                    (array_expression
                      (identifier)
                      (identifier))))))))))))
