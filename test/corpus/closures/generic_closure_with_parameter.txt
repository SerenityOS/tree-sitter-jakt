================================================================================
Closures generic closure with parameter
================================================================================

function find<T>(anon arr: [T], anon cb: function(a: T) -> bool) -> T? {
    for i in 0..arr.size() {
        if cb(a: arr[i]) {
            return i
        }
    }
    return None
}

function main() {
    mut arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    
    println("{}", find(arr, function(a: i64) -> bool => a == 5).value_or(-1))
}

--------------------------------------------------------------------------------

(source_file
  (generic_function_declaration
    (generic_type
      (identifier)
      (generic_arguments
        (type_identifier)))
    (parameters
      (parameter
        (anonymous_specifier)
        (identifier)
        (array_type
          (type_identifier)))
      (parameter
        (anonymous_specifier)
        (identifier)
        (closure_function_type
          (parameters
            (parameter
              (identifier)
              (type_identifier)))
          (primitive_type))))
    (optional_type
      (type_identifier))
    (block
      (for_expression
        (identifier)
        (range_expression
          (integer_literal)
          (call_expression
            (field_expression
              (identifier)
              (field_identifier))
            (arguments)))
        (block
          (if_statement
            (call_expression
              (identifier)
              (arguments
                (argument
                  (identifier)
                  (array_expression
                    (identifier)
                    (identifier)))))
            (block
              (return_statement
                (identifier))))))
      (return_statement
        (none_expression))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (array_literal
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (call_expression
              (field_expression
                (call_expression
                  (identifier)
                  (arguments
                    (argument
                      (identifier))
                    (closure_function
                      (parameters
                        (parameter
                          (identifier)
                          (primitive_type)))
                      (primitive_type)
                      (return_expression
                        (binary_expression
                          (identifier)
                          (integer_literal))))))
                (field_identifier))
              (arguments
                (argument
                  (unary_expression
                    (integer_literal)))))))))))
