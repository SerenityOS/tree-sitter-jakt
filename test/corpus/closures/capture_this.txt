================================================================================
Closures Capture This ID=ABYE1VL
================================================================================

/// Expect:
/// - output: "0\n1\n"

struct Foo {
    bar: i64

    fn baz(mut this) {
        let lambda = fn[this]() {
            println("{}", this.bar)
            this.bar++
        }

        lambda()
    }
}

fn main() {
    mut foo = Foo(bar: 0)

    foo.baz()
    foo.baz()
}

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (struct_declaration
    (type_identifier)
    (field_declaration_list
      (field_declaration
        (field_identifier)
        (primitive_type))
      (function_declaration
        (identifier)
        (parameters
          (this_parameter
            (mutable_specifier)
            (this_reference)))
        (block
          (let_declaration
            (identifier)
            (closure_function
              (capture_reference)
              (parameters)
              (block
                (call_expression
                  (identifier)
                  (arguments
                    (argument
                      (string_literal))
                    (argument
                      (field_expression
                        (this_reference)
                        (field_identifier)))))
                (update_expression
                  (field_expression
                    (this_reference)
                    (field_identifier))))))
          (call_expression
            (identifier)
            (arguments))))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (argument
              (identifier)
              (integer_literal)))))
      (call_expression
        (field_expression
          (identifier)
          (field_identifier))
        (arguments))
      (call_expression
        (field_expression
          (identifier)
          (field_identifier))
        (arguments)))))
