================================================================================
Apps Read All ID=LCYFFM8
================================================================================

/// Expect:
/// - output: "text: So there I was, in the rain, all alone...\n"

fn parse_to_string(file_path: String) throws -> String {
    mut file = File::open_for_reading(file_path)
    mut builder = StringBuilder::create()
    for b in file.read_all() {
        builder.append(b)
    }
    return builder.to_string()
}

fn main(args: [String]) throws {
    // replace "mystery.txt" with args[1] to be able to run "./readall mystery.txt"
    let file_data = parse_to_string(file_path: "mystery.txt")
    println("text: {}", file_data)
}

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (identifier)
        (primitive_type)))
    (throws_specifier)
    (primitive_type)
    (block
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (static_call_expression
          (scoped_identifier)
          (field_identifier)
          (arguments
            (argument
              (identifier)))))
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (static_call_expression
          (scoped_identifier)
          (field_identifier)
          (arguments)))
      (for_expression
        (identifier)
        (call_expression
          (field_expression
            (identifier)
            (field_identifier))
          (arguments))
        (block
          (call_expression
            (field_expression
              (identifier)
              (field_identifier))
            (arguments
              (argument
                (identifier))))))
      (return_statement
        (call_expression
          (field_expression
            (identifier)
            (field_identifier))
          (arguments)))))
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (identifier)
        (array_type
          (primitive_type))))
    (throws_specifier)
    (block
      (line_comment)
      (let_declaration
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (argument
              (identifier)
              (string_literal)))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (identifier)))))))
