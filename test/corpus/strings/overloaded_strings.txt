================================================================================
Strings Overloaded Strings ID=J9CY7A4
================================================================================

/// Expect:
/// - output: "1024\n42\nbest string ever\n"

struct ActuallyANumber implements(FromStringLiteral) {
    value: i32

    fn from_string_literal(anon str: StringView) -> ActuallyANumber {
        mut value = 0i32
        for i in 0..str.length() {
            value = value * 10 + (str.byte_at(i) - b'0') as! i32
        }

        return ActuallyANumber(value)
    }
}

struct BadString implements(ThrowingFromStringLiteral) {
    fn from_string_literal(anon str: StringView) throws -> BadString {
        throw Error::from_string_literal(str)
    }
}

fn value_of(anon x: ActuallyANumber) -> i32 {
    return x.value
}

fn is_a_good_string(anon x: BadString) -> bool {
    return true
}

fn main() {
    let x: ActuallyANumber = "1024"
    println("{}", x.value)

    println("{}", value_of("42"))

    try {
        println("{}", is_a_good_string("best string ever"))
    } catch e {
        println("{}", e.string())
    }
}

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (struct_declaration
    (type_identifier)
    (trait_identifier)
    (field_declaration_list
      (field_declaration
        (field_identifier)
        (primitive_type))
      (function_declaration
        (identifier)
        (parameters
          (parameter
            (anonymous_specifier)
            (identifier)
            (type_identifier)))
        (type_identifier)
        (block
          (mutable_declaration
            (mutable_specifier)
            (identifier)
            (integer_literal))
          (for_expression
            (identifier)
            (range_expression
              (integer_literal)
              (call_expression
                (field_expression
                  (identifier)
                  (field_identifier))
                (arguments)))
            (block
              (assignment_expression
                (identifier)
                (type_conversion_expression
                  (binary_expression
                    (binary_expression
                      (identifier)
                      (integer_literal))
                    (parenthesized_expression
                      (binary_expression
                        (call_expression
                          (field_expression
                            (identifier)
                            (field_identifier))
                          (arguments
                            (argument
                              (identifier))))
                        (byte_literal))))
                  (primitive_type)))))
          (return_statement
            (call_expression
              (identifier)
              (arguments
                (argument
                  (identifier)))))))))
  (struct_declaration
    (type_identifier)
    (trait_identifier)
    (field_declaration_list
      (function_declaration
        (identifier)
        (parameters
          (parameter
            (anonymous_specifier)
            (identifier)
            (type_identifier)))
        (throws_specifier)
        (type_identifier)
        (block
          (throw_statement
            (static_call_expression
              (scoped_identifier)
              (field_identifier)
              (arguments
                (argument
                  (identifier)))))))))
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (anonymous_specifier)
        (identifier)
        (type_identifier)))
    (primitive_type)
    (block
      (return_statement
        (field_expression
          (identifier)
          (field_identifier)))))
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (anonymous_specifier)
        (identifier)
        (type_identifier)))
    (primitive_type)
    (block
      (return_statement
        (boolean_literal))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (let_declaration
        (identifier)
        (type_identifier)
        (string_literal))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (field_expression
              (identifier)
              (field_identifier)))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (call_expression
              (identifier)
              (arguments
                (argument
                  (string_literal)))))))
      (try_statement
        (block
          (call_expression
            (identifier)
            (arguments
              (argument
                (string_literal))
              (argument
                (call_expression
                  (identifier)
                  (arguments
                    (argument
                      (string_literal))))))))
        (identifier)
        (block
          (call_expression
            (identifier)
            (arguments
              (argument
                (string_literal))
              (argument
                (call_expression
                  (field_expression
                    (identifier)
                    (field_identifier))
                  (arguments))))))))))
