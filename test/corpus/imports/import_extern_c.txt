================================================================================
Imports import extern c (first)
================================================================================

import extern c "stdlib.h"  {
    extern function malloc(size: usize) -> raw void
    extern function free(anon mut ptr: raw void) -> i32
}

import extern c "fcntl.h"  {
    extern function open(path: raw c_char, flags: i32) -> i32
    extern function read(fd: i32, mut buffer: raw void, max_len: usize) -> i64
    extern function close(fd: i32) -> i32
}

// FIXME: Windows-only, for open/read/close (#1015)
import extern c "io.h" {
}

function main() {
    // NOTE: that zero is O_RDONLY.
    let fd = open(path: "import_extern_text.txt".c_string(),  flags: 0)
    if fd == -1i32 {
        eprintln("Could not open 'import_extern_text.txt'")
        unsafe { cpp { "return Error::from_errno(errno);" }}
    }

    mut buffer = malloc(size: 512)
    // I can't cast the pointer to compare it!
    unsafe { 
        cpp {
            "if (buffer == NULL) {"
        }
        eprintln("Could not allocate memory")
        cpp { 
            "    return Error::from_errno(ENOMEM);" 
            "}" 
        }
    }
    let read_amount = read(fd, buffer, max_len: 512)
    if read_amount == -1i64 {
        eprintln("Could not read from 'import_extern_text.txt'")
        unsafe { cpp { "return Error::from_errno(errno);" }}
    }

    mut builder = StringBuilder::create();
    for i in 0..read_amount {
        unsafe { cpp {
                "TRY(builder.append(((u8*)buffer)[i]));"
        }}
    }
    print("{}", builder.to_string())

    free(buffer)
    close(fd)
}

--------------------------------------------------------------------------------

(source_file
  (import_statement
    (extern_specifier)
    (c_header_identfier)
    (import_block
      (extern_function_declaration
        (extern_specifier)
        (identifier)
        (parameters
          (parameter
            (identifier)
            (primitive_type)))
        (pointer_type
          (identifier)))
      (extern_function_declaration
        (extern_specifier)
        (identifier)
        (parameters
          (parameter
            (anonymous_specifier)
            (mutable_specifier)
            (identifier)
            (pointer_type
              (identifier))))
        (primitive_type))))
  (import_statement
    (extern_specifier)
    (c_header_identfier)
    (import_block
      (extern_function_declaration
        (extern_specifier)
        (identifier)
        (parameters
          (parameter
            (identifier)
            (pointer_type
              (identifier)))
          (parameter
            (identifier)
            (primitive_type)))
        (primitive_type))
      (extern_function_declaration
        (extern_specifier)
        (identifier)
        (parameters
          (parameter
            (identifier)
            (primitive_type))
          (parameter
            (mutable_specifier)
            (identifier)
            (pointer_type
              (identifier)))
          (parameter
            (identifier)
            (primitive_type)))
        (primitive_type))
      (extern_function_declaration
        (extern_specifier)
        (identifier)
        (parameters
          (parameter
            (identifier)
            (primitive_type)))
        (primitive_type))))
  (line_comment)
  (import_statement
    (extern_specifier)
    (c_header_identfier)
    (import_block))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (line_comment)
      (let_declaration
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (argument
              (identifier)
              (call_expression
                (field_expression
                  (string_literal)
                  (field_identifier))
                (arguments)))
            (argument
              (identifier)
              (integer_literal)))))
      (if_statement
        (binary_expression
          (identifier)
          (unary_expression
            (integer_literal)))
        (block
          (call_expression
            (identifier)
            (arguments
              (argument
                (string_literal))))
          (unsafe_block
            (cpp_block
              (cpp_code_start)
              (cpp_code)
              (cpp_code_end)))))
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (argument
              (identifier)
              (integer_literal)))))
      (line_comment)
      (unsafe_block
        (cpp_block
          (cpp_code_start)
          (cpp_code)
          (cpp_code_end))
        (call_expression
          (identifier)
          (arguments
            (argument
              (string_literal))))
        (cpp_block
          (cpp_code_start)
          (cpp_code)
          (cpp_code_end)
          (cpp_code_start)
          (cpp_code)
          (cpp_code_end)))
      (let_declaration
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (argument
              (identifier))
            (argument
              (identifier))
            (argument
              (identifier)
              (integer_literal)))))
      (if_statement
        (binary_expression
          (identifier)
          (unary_expression
            (integer_literal)))
        (block
          (call_expression
            (identifier)
            (arguments
              (argument
                (string_literal))))
          (unsafe_block
            (cpp_block
              (cpp_code_start)
              (cpp_code)
              (cpp_code_end)))))
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (static_call_expression
          (scoped_identifier)
          (field_identifier)
          (arguments)))
      (for_expression
        (identifier)
        (range_expression
          (integer_literal)
          (identifier))
        (block
          (unsafe_block
            (cpp_block
              (cpp_code_start)
              (cpp_code)
              (cpp_code_end)))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (call_expression
              (field_expression
                (identifier)
                (field_identifier))
              (arguments)))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (identifier))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (identifier)))))))
