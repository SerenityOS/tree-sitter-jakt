================================================================================
Math Arithmetic Assignment ID=MPFLBLC
================================================================================

/// Expect:
/// - output: "133\n113\n1230\n12\n3\n"

fn main() {
    mut a = 123
    a += 10
    mut b = 123
    b -= 10
    mut c = 123
    c *= 10
    mut d = 123
    d /= 10
    mut e = 123
    e %= 10

    println("{}", a)
    println("{}", b)
    println("{}", c)
    println("{}", d)
    println("{}", e)
}

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (function_declaration
    (identifier)
    (parameters)
    (block
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (integer_literal))
      (assignment_expression
        (identifier)
        (integer_literal))
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (integer_literal))
      (assignment_expression
        (identifier)
        (integer_literal))
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (integer_literal))
      (assignment_expression
        (identifier)
        (integer_literal))
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (integer_literal))
      (assignment_expression
        (identifier)
        (integer_literal))
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (integer_literal))
      (assignment_expression
        (identifier)
        (integer_literal))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (identifier))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (identifier))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (identifier))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (identifier))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (identifier)))))))
