================================================================================
Enums simple match
================================================================================

enum BetterOptional<T> {
    Some(T)
    None
}

enum BetterResult<T, E> {
    ImFineHowAreYou(T)
    TheWorldIsBurning(E)
}

enum ObjectivelyBetterOptional<T> {
    Some (
        value: T
        joke_metadata: String
    )
    None
}

function make_result(okay: bool) -> BetterResult<i64, String> {
    if okay {
        return BetterResult::ImFineHowAreYou(42)
    }
    return BetterResult::TheWorldIsBurning("666")
}

function better_optional_from<T>(anon optional: T?) -> BetterOptional<T> {
    if optional.has_value() {
        return BetterOptional::Some(optional!)
    }
    return BetterOptional::None()
}

function to_objectively_better_optional<T>(anon optional: BetterOptional<T>) -> ObjectivelyBetterOptional<T> {
    return match optional {
        BetterOptional::Some(value) => ObjectivelyBetterOptional::Some(value: value, joke_metadata: "I'm a joke")
        BetterOptional::None => ObjectivelyBetterOptional::None()
    }
}

function main() {
    match make_result(okay: true) {
        ImFineHowAreYou(x) => {
            let a: i64? = x
            match to_objectively_better_optional(better_optional_from(a)) {
                Some(value: x) => println("Success! we're fine and there's a {} in our optional", x)
                None => println("What??????")
            }
        }
        TheWorldIsBurning => println("What do you mean the world is burning, it's perfectly fine")
    }
    let str = match make_result(okay: false) {
        ImFineHowAreYou => "No you're not!!!!111One!"
        TheWorldIsBurning => "So it is..."
    }
    if str == "So it is..." {
        return 0
    }
    return 1
}

--------------------------------------------------------------------------------

(source_file
  (enum_declaration
    (generic_type
      (identifier)
      (generic_arguments
        (type_identifier)))
    (enum_variant_list
      (enum_tuple_variant
        (identifier)
        (type_identifier))
      (enum_variant
        (identifier))))
  (enum_declaration
    (generic_type
      (identifier)
      (generic_arguments
        (type_identifier)
        (type_identifier)))
    (enum_variant_list
      (enum_tuple_variant
        (identifier)
        (type_identifier))
      (enum_tuple_variant
        (identifier)
        (type_identifier))))
  (enum_declaration
    (generic_type
      (identifier)
      (generic_arguments
        (type_identifier)))
    (enum_variant_list
      (enum_struct_variant
        (identifier)
        (field_declaration
          (field_identifier)
          (type_identifier))
        (field_declaration
          (field_identifier)
          (primitive_type)))
      (enum_variant
        (identifier))))
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (identifier)
        (primitive_type)))
    (generic_type
      (identifier)
      (generic_arguments
        (primitive_type)
        (primitive_type)))
    (block
      (if_statement
        (identifier)
        (block
          (return_statement
            (static_call_expression
              (scoped_identifier)
              (field_identifier)
              (arguments
                (argument
                  (integer_literal)))))))
      (return_statement
        (static_call_expression
          (scoped_identifier)
          (field_identifier)
          (arguments
            (argument
              (string_literal)))))))
  (generic_function_declaration
    (generic_type
      (identifier)
      (generic_arguments
        (type_identifier)))
    (parameters
      (parameter
        (anonymous_specifier)
        (identifier)
        (optional_type
          (type_identifier))))
    (generic_type
      (identifier)
      (generic_arguments
        (type_identifier)))
    (block
      (if_statement
        (call_expression
          (field_expression
            (identifier)
            (field_identifier))
          (arguments))
        (block
          (return_statement
            (static_call_expression
              (scoped_identifier)
              (field_identifier)
              (arguments
                (argument
                  (optional_value_expression
                    (identifier))))))))
      (return_statement
        (static_call_expression
          (scoped_identifier)
          (field_identifier)
          (arguments)))))
  (generic_function_declaration
    (generic_type
      (identifier)
      (generic_arguments
        (type_identifier)))
    (parameters
      (parameter
        (anonymous_specifier)
        (identifier)
        (generic_type
          (identifier)
          (generic_arguments
            (type_identifier)))))
    (generic_type
      (identifier)
      (generic_arguments
        (type_identifier)))
    (block
      (return_statement
        (match_expression
          (identifier)
          (match_block
            (match_arm
              (match_pattern
                (static_call_expression
                  (scoped_identifier)
                  (field_identifier)
                  (arguments
                    (argument
                      (identifier)))))
              (static_call_expression
                (scoped_identifier)
                (field_identifier)
                (arguments
                  (argument
                    (identifier)
                    (identifier))
                  (argument
                    (identifier)
                    (string_literal)))))
            (match_arm
              (match_pattern
                (namespace_scope_expression
                  (scoped_identifier)
                  (field_identifier)))
              (static_call_expression
                (scoped_identifier)
                (field_identifier)
                (arguments))))))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (match_expression
        (call_expression
          (identifier)
          (arguments
            (argument
              (identifier)
              (boolean_literal))))
        (match_block
          (match_arm
            (match_pattern
              (call_expression
                (identifier)
                (arguments
                  (argument
                    (identifier)))))
            (block
              (let_declaration
                (identifier)
                (optional_type
                  (primitive_type))
                (identifier))
              (match_expression
                (call_expression
                  (identifier)
                  (arguments
                    (argument
                      (call_expression
                        (identifier)
                        (arguments
                          (argument
                            (identifier)))))))
                (match_block
                  (match_arm
                    (match_pattern
                      (call_expression
                        (identifier)
                        (arguments
                          (argument
                            (identifier)
                            (identifier)))))
                    (call_expression
                      (identifier)
                      (arguments
                        (argument
                          (string_literal))
                        (argument
                          (identifier)))))
                  (match_arm
                    (match_pattern
                      (none_expression))
                    (call_expression
                      (identifier)
                      (arguments
                        (argument
                          (string_literal)))))))))
          (match_arm
            (match_pattern
              (identifier))
            (call_expression
              (identifier)
              (arguments
                (argument
                  (string_literal)))))))
      (let_declaration
        (identifier)
        (match_expression
          (call_expression
            (identifier)
            (arguments
              (argument
                (identifier)
                (boolean_literal))))
          (match_block
            (match_arm
              (match_pattern
                (identifier))
              (string_literal))
            (match_arm
              (match_pattern
                (identifier))
              (string_literal)))))
      (if_statement
        (binary_expression
          (identifier)
          (string_literal))
        (block
          (return_statement
            (integer_literal))))
      (return_statement
        (integer_literal)))))
