================================================================================
Control Flow For ID=DLA0D5N
================================================================================

/// Expect:
/// - output: "10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n"

struct Countdown implements(Iterable<i64>) {
    from: i64

    fn next(mut this) -> i64? {
        if this.from == -1 {
            return None
        }

        let value = this.from
        --this.from
        return value
    }
}

fn main() {
    for x in Countdown(from: 10) {
        println("{}", x)
    }
}

--------------------------------------------------------------------------------

(source_file
  (struct_declaration
    (type_identifier)
    (field_declaration_list
      (field_declaration
        (field_identifier)
        (primitive_type))
      (function_declaration
        (identifier)
        (parameters
          (this_parameter
            (mutable_specifier)
            (this_reference)))
        (optional_type
          (primitive_type))
        (block
          (if_statement
            (binary_expression
              (field_expression
                (this_reference)
                (field_identifier))
              (unary_expression
                (integer_literal)))
            (block
              (return_statement
                (none_expression))))
          (let_declaration
            (identifier)
            (field_expression
              (this_reference)
              (field_identifier)))
          (field_expression
            (update_expression
              (identifier))
            (field_identifier))
          (return_statement
            (identifier))))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (for_expression
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (argument
              (identifier)
              (integer_literal))))
        (block
          (call_expression
            (identifier)
            (arguments
              (argument
                (string_literal))
              (argument
                (identifier)))))))))
