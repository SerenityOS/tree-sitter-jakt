================================================================================
Closures with parameter
================================================================================

function find(anon arr: [i64], anon cb: function(a: i64) -> bool) -> i64? {
    for i in 0..arr.size() {
        if cb(a: arr[i]) {
            return arr[i]
        }
    }
    return None
}

function main() {
    mut arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    println("{}", find(arr, function(a: i64) => a == 5))
}

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (anonymous_specifier)
        (identifier)
        (array_type
          (primitive_type)))
      (parameter
        (anonymous_specifier)
        (identifier)
        (closure_function_type
          (parameters
            (parameter
              (identifier)
              (primitive_type)))
          (primitive_type))))
    (optional_type
      (primitive_type))
    (block
      (for_expression
        (identifier)
        (range_expression
          (integer_literal)
          (call_expression
            (field_expression
              (identifier)
              (field_identifier))
            (arguments)))
        (block
          (if_statement
            (call_expression
              (identifier)
              (arguments
                (argument
                  (identifier)
                  (array_expression
                    (identifier)
                    (identifier)))))
            (block
              (return_statement
                (array_expression
                  (identifier)
                  (identifier)))))))
      (return_statement
        (none_expression))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (array_literal
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (call_expression
              (identifier)
              (arguments
                (argument
                  (identifier))
                (closure_function
                  (parameters
                    (parameter
                      (identifier)
                      (primitive_type)))
                  (return_expression
                    (binary_expression
                      (identifier)
                      (integer_literal))))))))))))
