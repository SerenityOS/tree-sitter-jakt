================================================================================
Compiletime Execution String ID=MI9OTE5
================================================================================

/// Expect:
/// - output: "PASS\n"

comptime empty() throws => "".is_empty()
comptime length() throws => "a string of length 21".length()
comptime substring() throws => "abcdef".substring(start: 1, length: 3)
comptime hash() throws => "well, hello friends".hash()
comptime number() throws => String::number(123)
comptime to_uint() throws => "123".to_uint()
comptime to_int() throws => "-456".to_int()
comptime is_whitespace() throws => " ".is_whitespace() and not "abc".is_whitespace()
comptime contains() throws => "abcdef".contains("bcd")
comptime replace() throws => "well, hiya friends".replace(replace: "hiya", with: "hello")
comptime byte_at() throws => "AAAA".byte_at(3)
comptime starts_with() throws => "abcdef".starts_with("abc")
comptime ends_with() throws => "abcdef".ends_with("def")
comptime repeated() throws => String::repeated(character: c'A', count: 5)
comptime split() throws => "a;b;c".split(c';')

fn main() {
    mut success = empty()
    success = success and length() == 21
    success = success and substring() == "bcd"
    success = success and hash() == "well, hello friends".hash()
    success = success and number() == "123"
    success = success and to_uint()! == 123u32
    success = success and to_int()! == -456i32
    success = success and is_whitespace()
    success = success and contains()
    success = success and replace() == "well, hello friends"
    success = success and byte_at() == 0x41
    success = success and starts_with()
    success = success and ends_with()
    success = success and repeated() == "AAAAA"
    let parts = split()
    success = success and parts[0] == "a"
    success = success and parts[1] == "b"
    success = success and parts[2] == "c"

    if success {
        println("PASS")
    } else {
        println("FAIL")
    }
}

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (call_expression
        (field_expression
          (string_literal)
          (field_identifier))
        (arguments))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (call_expression
        (field_expression
          (string_literal)
          (field_identifier))
        (arguments))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (call_expression
        (field_expression
          (string_literal)
          (field_identifier))
        (arguments
          (argument
            (identifier)
            (integer_literal))
          (argument
            (identifier)
            (integer_literal))))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (call_expression
        (field_expression
          (string_literal)
          (field_identifier))
        (arguments))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (static_call_expression
        (scoped_identifier)
        (field_identifier)
        (arguments
          (argument
            (integer_literal))))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (call_expression
        (field_expression
          (string_literal)
          (field_identifier))
        (arguments))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (call_expression
        (field_expression
          (string_literal)
          (field_identifier))
        (arguments))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (binary_expression
        (call_expression
          (field_expression
            (string_literal)
            (field_identifier))
          (arguments))
        (logical_not_expression
          (call_expression
            (field_expression
              (string_literal)
              (field_identifier))
            (arguments))))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (call_expression
        (field_expression
          (string_literal)
          (field_identifier))
        (arguments
          (argument
            (string_literal))))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (call_expression
        (field_expression
          (string_literal)
          (field_identifier))
        (arguments
          (argument
            (identifier)
            (string_literal))
          (argument
            (identifier)
            (string_literal))))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (call_expression
        (field_expression
          (string_literal)
          (field_identifier))
        (arguments
          (argument
            (integer_literal))))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (call_expression
        (field_expression
          (string_literal)
          (field_identifier))
        (arguments
          (argument
            (string_literal))))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (call_expression
        (field_expression
          (string_literal)
          (field_identifier))
        (arguments
          (argument
            (string_literal))))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (static_call_expression
        (scoped_identifier)
        (field_identifier)
        (arguments
          (argument
            (identifier)
            (identifier))
          (argument
            (char_literal))
          (argument
            (identifier)
            (integer_literal))))))
  (comptime_function_declaration
    (identifier)
    (parameters)
    (throws_specifier)
    (return_expression
      (call_expression
        (field_expression
          (string_literal)
          (field_identifier))
        (arguments
          (argument
            (identifier))
          (argument
            (char_literal))))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (call_expression
          (identifier)
          (arguments)))
      (assignment_expression
        (identifier)
        (binary_expression
          (identifier)
          (binary_expression
            (call_expression
              (identifier)
              (arguments))
            (integer_literal))))
      (assignment_expression
        (identifier)
        (binary_expression
          (identifier)
          (binary_expression
            (call_expression
              (identifier)
              (arguments))
            (string_literal))))
      (assignment_expression
        (identifier)
        (binary_expression
          (identifier)
          (binary_expression
            (call_expression
              (identifier)
              (arguments))
            (call_expression
              (field_expression
                (string_literal)
                (field_identifier))
              (arguments)))))
      (assignment_expression
        (identifier)
        (binary_expression
          (identifier)
          (binary_expression
            (call_expression
              (identifier)
              (arguments))
            (string_literal))))
      (assignment_expression
        (identifier)
        (binary_expression
          (optional_value_expression
            (binary_expression
              (identifier)
              (call_expression
                (identifier)
                (arguments))))
          (integer_literal)))
      (assignment_expression
        (identifier)
        (binary_expression
          (optional_value_expression
            (binary_expression
              (identifier)
              (call_expression
                (identifier)
                (arguments))))
          (unary_expression
            (integer_literal))))
      (assignment_expression
        (identifier)
        (binary_expression
          (identifier)
          (call_expression
            (identifier)
            (arguments))))
      (assignment_expression
        (identifier)
        (binary_expression
          (identifier)
          (call_expression
            (identifier)
            (arguments))))
      (assignment_expression
        (identifier)
        (binary_expression
          (identifier)
          (binary_expression
            (call_expression
              (identifier)
              (arguments))
            (string_literal))))
      (assignment_expression
        (identifier)
        (binary_expression
          (identifier)
          (binary_expression
            (call_expression
              (identifier)
              (arguments))
            (integer_literal))))
      (assignment_expression
        (identifier)
        (binary_expression
          (identifier)
          (call_expression
            (identifier)
            (arguments))))
      (assignment_expression
        (identifier)
        (binary_expression
          (identifier)
          (call_expression
            (identifier)
            (arguments))))
      (assignment_expression
        (identifier)
        (binary_expression
          (identifier)
          (binary_expression
            (call_expression
              (identifier)
              (arguments))
            (string_literal))))
      (let_declaration
        (identifier)
        (call_expression
          (identifier)
          (arguments)))
      (assignment_expression
        (identifier)
        (binary_expression
          (array_expression
            (binary_expression
              (identifier)
              (identifier))
            (integer_literal))
          (string_literal)))
      (assignment_expression
        (identifier)
        (binary_expression
          (array_expression
            (binary_expression
              (identifier)
              (identifier))
            (integer_literal))
          (string_literal)))
      (assignment_expression
        (identifier)
        (binary_expression
          (array_expression
            (binary_expression
              (identifier)
              (identifier))
            (integer_literal))
          (string_literal)))
      (if_statement
        (identifier)
        (block
          (call_expression
            (identifier)
            (arguments
              (argument
                (string_literal)))))
        (else_clause
          (block
            (call_expression
              (identifier)
              (arguments
                (argument
                  (string_literal))))))))))
