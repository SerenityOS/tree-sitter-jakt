================================================================================
Weak reassign
================================================================================

class Foo {
    public x: i64
}

function main() {
    let foo1 = Foo(x: 1)
    let foo2 = Foo(x: 2)

    mut weak_foo: weak Foo? = None
    weak_foo = foo1
    println("{}", weak_foo!.x)

    weak_foo = foo2
    println("{}", weak_foo!.x)

    weak_foo.clear()
    println("{}", weak_foo.has_value())
}

--------------------------------------------------------------------------------

(source_file
  (class_declaration
    (type_identifier)
    (field_declaration_list
      (field_declaration
        (visibility_specifier)
        (field_identifier)
        (primitive_type))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (let_declaration
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (argument
              (identifier)
              (integer_literal)))))
      (let_declaration
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (argument
              (identifier)
              (integer_literal)))))
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (weak_specifier)
        (optional_type
          (type_identifier))
        (none_expression))
      (assignment_expression
        (identifier)
        (identifier))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (field_expression
              (optional_value_expression
                (identifier))
              (field_identifier)))))
      (assignment_expression
        (identifier)
        (identifier))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (field_expression
              (optional_value_expression
                (identifier))
              (field_identifier)))))
      (call_expression
        (field_expression
          (identifier)
          (field_identifier))
        (arguments))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (call_expression
              (field_expression
                (identifier)
                (field_identifier))
              (arguments))))))))
