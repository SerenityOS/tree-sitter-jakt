================================================================================
Sets shorthand
================================================================================

function get_unique(nums: [i64]) throws -> {i64} {
    mut set = {nums[0]}
    for i in 1..nums.size() {
        set.add(nums[i])
    }
    return set
}

function main() {
    let nums = [1, 2, 3, 4, 5, 5]
    let set = get_unique(nums)
    println("{}", set.size())
}

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (identifier)
        (array_type
          (primitive_type))))
    (throws_specifier)
    (set_type
      (primitive_type))
    (block
      (mutable_declaration
        (mutable_specifier)
        (identifier)
        (set_literal
          (array_expression
            (identifier)
            (integer_literal))))
      (for_expression
        (identifier)
        (range_expression
          (integer_literal)
          (call_expression
            (field_expression
              (identifier)
              (field_identifier))
            (arguments)))
        (block
          (call_expression
            (field_expression
              (identifier)
              (field_identifier))
            (arguments
              (argument
                (array_expression
                  (identifier)
                  (identifier)))))))
      (return_statement
        (identifier))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (let_declaration
        (identifier)
        (array_literal
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)))
      (let_declaration
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (argument
              (identifier)))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (call_expression
              (field_expression
                (identifier)
                (field_identifier))
              (arguments))))))))
