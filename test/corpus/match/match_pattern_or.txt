================================================================================
Match Match Pattern Or ID=B4YYN4A
================================================================================

/// Expect:
/// - output: "PASS\nPASS\n"

enum Foo {
    Bar
    Baz
    Bat
}

fn main() {
    println("{}", match "foo" {
        "foo" | "bar" | "baz" => {
            yield "PASS"
        }
        else => "FAIL"
    })

    let p = Foo::Bar
    println("{}", match p {
        Bar => "PASS"
        Baz | else => "FAIL"
    })
}

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (enum_declaration
    (type_identifier)
    (enum_variant_list
      (enum_variant
        (identifier))
      (enum_variant
        (identifier))
      (enum_variant
        (identifier))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (match_expression
              (string_literal)
              (match_block
                (match_arm
                  (match_pattern
                    (binary_expression
                      (binary_expression
                        (string_literal)
                        (string_literal))
                      (string_literal)))
                  (block
                    (yield_statement
                      (string_literal))))
                (match_arm
                  (match_else)
                  (string_literal)))))))
      (let_declaration
        (identifier)
        (namespace_scope_expression
          (scoped_identifier)
          (field_identifier)))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (match_expression
              (identifier)
              (match_block
                (match_arm
                  (match_pattern
                    (identifier))
                  (string_literal))
                (match_arm
                  (match_pattern
                    (binary_expression
                      (identifier)
                      (identifier)))
                  (string_literal))))))))))
