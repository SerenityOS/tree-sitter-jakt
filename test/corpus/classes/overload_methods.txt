================================================================================
Classes Overload Methods ID=AJUTWTV
================================================================================

/// Expect:
/// - output: "144\n168\n"

class Rect {
    private width: i64
    private height: i64

    public fn construct(width: i64, height: i64) throws -> Rect {
        return Rect(width, height)
    }

    public fn construct(square_with_sides: i64) throws -> Rect {
        return Rect(width: square_with_sides, height: square_with_sides)
    }

    public fn area(this) -> i64 {
        return this.width * this.height
    }
}

fn main() {
    let square = Rect::construct(square_with_sides: 12)
    let rect = Rect::construct(width: 12, height: 14)
    println("{}", square.area())
    println("{}", rect.area())
}

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (class_declaration
    (type_identifier)
    (field_declaration_list
      (field_declaration
        (visibility_specifier)
        (field_identifier)
        (primitive_type))
      (field_declaration
        (visibility_specifier)
        (field_identifier)
        (primitive_type))
      (function_declaration
        (visibility_specifier)
        (identifier)
        (parameters
          (parameter
            (identifier)
            (primitive_type))
          (parameter
            (identifier)
            (primitive_type)))
        (throws_specifier)
        (type_identifier)
        (block
          (return_statement
            (call_expression
              (identifier)
              (arguments
                (argument
                  (identifier))
                (argument
                  (identifier)))))))
      (function_declaration
        (visibility_specifier)
        (identifier)
        (parameters
          (parameter
            (identifier)
            (primitive_type)))
        (throws_specifier)
        (type_identifier)
        (block
          (return_statement
            (call_expression
              (identifier)
              (arguments
                (argument
                  (identifier)
                  (identifier))
                (argument
                  (identifier)
                  (identifier)))))))
      (function_declaration
        (visibility_specifier)
        (identifier)
        (parameters
          (this_parameter
            (this_reference)))
        (primitive_type)
        (block
          (return_statement
            (binary_expression
              (field_expression
                (this_reference)
                (field_identifier))
              (field_expression
                (this_reference)
                (field_identifier))))))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (let_declaration
        (identifier)
        (static_call_expression
          (scoped_identifier)
          (field_identifier)
          (arguments
            (argument
              (identifier)
              (integer_literal)))))
      (let_declaration
        (identifier)
        (static_call_expression
          (scoped_identifier)
          (field_identifier)
          (arguments
            (argument
              (identifier)
              (integer_literal))
            (argument
              (identifier)
              (integer_literal)))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (call_expression
              (field_expression
                (identifier)
                (field_identifier))
              (arguments)))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (call_expression
              (field_expression
                (identifier)
                (field_identifier))
              (arguments))))))))
