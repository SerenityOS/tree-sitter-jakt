================================================================================
Basics Numeric Literal Suffixes ID=VZQL1OA
================================================================================

/// Expect:
/// - output: "5\n5\n5\n5\n5\n5\n5\n5\n5\n"

fn main() {
    mut a = 0uz
    a += 5 as! usize
    println("{}", a)

    {
        mut i = 0u8
        mut j = 0u16
        mut k = 0u32
        mut l = 0u64

        i += 5 as! u8
        j += 5 as! u16
        k += 5 as! u32
        l += 5 as! u64
        
        println("{}", i)
        println("{}", j)
        println("{}", k)
        println("{}", l)
    }
    {
        mut i = 0i8
        mut j = 0i16
        mut k = 0i32
        mut l = 0i64

        i += 5 as! i8
        j += 5 as! i16
        k += 5 as! i32
        l += 5 as! i64

        println("{}", i)
        println("{}", j)
        println("{}", k)
        println("{}", l)
    }
}

--------------------------------------------------------------------------------

(source_file
  (mutable_declaration
    (mutable_specifier)
    (identifier)
    (integer_literal))
  (assignment_expression
    (identifier)
    (type_conversion_expression
      (integer_literal)
      (primitive_type)))
  (block
    (mutable_declaration
      (mutable_specifier)
      (identifier)
      (integer_literal))
    (mutable_declaration
      (mutable_specifier)
      (identifier)
      (integer_literal))
    (mutable_declaration
      (mutable_specifier)
      (identifier)
      (integer_literal))
    (mutable_declaration
      (mutable_specifier)
      (identifier)
      (integer_literal))
    (assignment_expression
      (identifier)
      (type_conversion_expression
        (integer_literal)
        (primitive_type)))
    (assignment_expression
      (identifier)
      (type_conversion_expression
        (integer_literal)
        (primitive_type)))
    (assignment_expression
      (identifier)
      (type_conversion_expression
        (integer_literal)
        (primitive_type)))
    (assignment_expression
      (identifier)
      (type_conversion_expression
        (integer_literal)
        (primitive_type))))
  (block
    (mutable_declaration
      (mutable_specifier)
      (identifier)
      (integer_literal))
    (mutable_declaration
      (mutable_specifier)
      (identifier)
      (integer_literal))
    (mutable_declaration
      (mutable_specifier)
      (identifier)
      (integer_literal))
    (mutable_declaration
      (mutable_specifier)
      (identifier)
      (integer_literal))
    (assignment_expression
      (identifier)
      (type_conversion_expression
        (integer_literal)
        (primitive_type)))
    (assignment_expression
      (identifier)
      (type_conversion_expression
        (integer_literal)
        (primitive_type)))
    (assignment_expression
      (identifier)
      (type_conversion_expression
        (integer_literal)
        (primitive_type)))
    (assignment_expression
      (identifier)
      (type_conversion_expression
        (integer_literal)
        (primitive_type)))))
