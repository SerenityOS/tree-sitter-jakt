================================================================================
Functions Overloading ID=U25FJ50
================================================================================

/// Expect:
/// - output: "[\"Array\"]\n\"String\"\n64i64\n"

fn to_string(anon x: i64) throws -> String {
    return format("{}i64", x)
}
fn to_string(anon x: String) throws => format("\"{}\"", x)
fn to_string<T>(anon z: T) throws => format("{}", z)


fn main() {
    println(to_string(["Array"]))
    println(to_string("String"))
    println(to_string(64i64))
}

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (anonymous_specifier)
        (identifier)
        (primitive_type)))
    (throws_specifier)
    (primitive_type)
    (block
      (return_statement
        (call_expression
          (identifier)
          (arguments
            (argument
              (string_literal))
            (argument
              (identifier)))))))
  (function_declaration
    (identifier)
    (parameters
      (parameter
        (anonymous_specifier)
        (identifier)
        (primitive_type)))
    (throws_specifier)
    (return_expression
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal
              (escape_sequence)
              (escape_sequence)))
          (argument
            (identifier))))))
  (generic_function_declaration
    (generic_type
      (identifier)
      (generic_arguments
        (generic_type_identifier)))
    (parameters
      (parameter
        (anonymous_specifier)
        (identifier)
        (type_identifier)))
    (throws_specifier)
    (return_expression
      (call_expression
        (identifier)
        (arguments
          (argument
            (string_literal))
          (argument
            (identifier))))))
  (function_declaration
    (identifier)
    (parameters)
    (block
      (call_expression
        (identifier)
        (arguments
          (argument
            (call_expression
              (identifier)
              (arguments
                (argument
                  (array_literal
                    (string_literal))))))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (call_expression
              (identifier)
              (arguments
                (argument
                  (string_literal)))))))
      (call_expression
        (identifier)
        (arguments
          (argument
            (call_expression
              (identifier)
              (arguments
                (argument
                  (integer_literal))))))))))
